{
  "development": [
    {
      "userEmail": "admin@example.com",
      "frontContent": "What is the Event Loop in Node.js?",
      "backContent": "Single-threaded event-driven architecture that handles I/O operations asynchronously using callbacks, promises, and async/await. The event loop continuously checks the call stack and processes tasks from the callback queue when the stack is empty.",
      "deckId": 2,
      "aFactor": 2.0,
      "repetitionCount": 3,
      "intervalDays": 8,
      "lapsesCount": 1,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-08-20\",\"grade\":2,\"interval\":1},{\"date\":\"2025-08-23\",\"grade\":3,\"interval\":3},{\"date\":\"2025-08-26\",\"grade\":4,\"interval\":8}]"
    },
    {
      "userEmail": "admin@example.com",
      "frontContent": "How do you create an HTTP server in Node.js?",
      "backContent": "Use http.createServer() method or Express.js framework:\\n\\nBasic HTTP: `const server = http.createServer((req, res) => { res.end('Hello World') }); server.listen(3000)`\\n\\nExpress: `const app = express(); app.listen(3000)`",
      "deckId": 2,
      "aFactor": 2.6,
      "repetitionCount": 2,
      "intervalDays": 5,
      "lapsesCount": 0,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-09-01\",\"grade\":4,\"interval\":2},{\"date\":\"2025-09-03\",\"grade\":4,\"interval\":5}]"
    },
    {
      "userEmail": "user1@example.com",
      "frontContent": "What's the difference between require() and import?",
      "backContent": "require() is CommonJS (synchronous), import is ES6 modules (asynchronous). Node.js supports both:\\n\\nCommonJS: `const express = require('express')`\\nES6: `import express from 'express'`\\n\\nUse .mjs extension or package.json 'type': 'module' for ES6.",
      "deckId": 2,
      "aFactor": 2.2,
      "repetitionCount": 1,
      "intervalDays": 2,
      "lapsesCount": 0,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-09-06\",\"grade\":3,\"interval\":2}]"
    },
    {
      "userEmail": "user1@example.com",
      "frontContent": "How do you handle environment variables in Node.js?",
      "backContent": "Use process.env to access environment variables and dotenv package to load .env files:\\n\\n`const port = process.env.PORT || 3000`\\n\\nWith dotenv: `require('dotenv').config()` then access via process.env.VARIABLE_NAME",
      "deckId": 2,
      "aFactor": 2.7,
      "repetitionCount": 1,
      "intervalDays": 3,
      "lapsesCount": 0,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-09-05\",\"grade\":4,\"interval\":3}]"
    },
    {
      "userEmail": "admin@example.com",
      "frontContent": "What is middleware in Express.js?",
      "backContent": "Functions that execute during the request/response cycle. They have access to req, res, and next objects:\\n\\n`app.use((req, res, next) => { console.log('Time:', Date.now()); next(); })`\\n\\nMiddleware can modify requests, end responses, or call next() to continue.",
      "deckId": 2,
      "aFactor": 2.3,
      "repetitionCount": 2,
      "intervalDays": 4,
      "lapsesCount": 0,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-09-02\",\"grade\":3,\"interval\":2},{\"date\":\"2025-09-04\",\"grade\":4,\"interval\":4}]"
    },
    {
      "userEmail": "user1@example.com",
      "frontContent": "How do you handle async errors in Node.js?",
      "backContent": "Multiple approaches for different patterns:\\n\\n1. Try/catch with async/await\\n2. .catch() with promises\\n3. Error-first callbacks\\n4. process.on('uncaughtException') for unhandled errors\\n5. Use error handling middleware in Express",
      "deckId": 2,
      "aFactor": 1.9,
      "repetitionCount": 4,
      "intervalDays": 12,
      "lapsesCount": 2,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-08-15\",\"grade\":1,\"interval\":1},{\"date\":\"2025-08-17\",\"grade\":2,\"interval\":1},{\"date\":\"2025-08-20\",\"grade\":3,\"interval\":3},{\"date\":\"2025-08-23\",\"grade\":4,\"interval\":12}]"
    },
    {
      "userEmail": "user1@example.com",
      "frontContent": "What is closure in JavaScript?",
      "backContent": "A closure occurs when an inner function has access to the outer function's variables even after the outer function returns. It creates private scope and enables data encapsulation:\\n\\nfunction outer(x) { return function(y) { return x + y; }; }\\nconst add5 = outer(5); // closure maintains access to x=5",
      "deckId": 4,
      "aFactor": 2.0,
      "repetitionCount": 3,
      "intervalDays": 7,
      "lapsesCount": 1,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-08-28\",\"grade\":2,\"interval\":1},{\"date\":\"2025-08-30\",\"grade\":3,\"interval\":3},{\"date\":\"2025-09-02\",\"grade\":4,\"interval\":7}]"
    },
    {
      "userEmail": "user2@example.com",
      "frontContent": "Explain let vs const vs var in JavaScript",
      "backContent": "Three ways to declare variables with different scoping rules:\\n\\n- **var**: function/global scope, hoisted, can be redeclared\\n- **let**: block scope, not hoisted, cannot be redeclared\\n- **const**: block scope, immutable binding, must be initialized, cannot be reassigned",
      "deckId": 4,
      "aFactor": 2.4,
      "repetitionCount": 2,
      "intervalDays": 4,
      "lapsesCount": 0,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-09-03\",\"grade\":3,\"interval\":2},{\"date\":\"2025-09-05\",\"grade\":4,\"interval\":4}]"
    },
    {
      "userEmail": "user1@example.com",
      "frontContent": "What is the JavaScript event loop?",
      "backContent": "Mechanism that handles asynchronous operations:\\n\\n1. **Call Stack**: Executes functions\\n2. **Web APIs**: Handle async operations (setTimeout, HTTP requests)\\n3. **Callback Queue**: Stores completed callbacks\\n4. **Event Loop**: Moves callbacks from queue to stack when stack is empty",
      "deckId": 4,
      "aFactor": 1.8,
      "repetitionCount": 5,
      "intervalDays": 15,
      "lapsesCount": 3,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-08-10\",\"grade\":1,\"interval\":1},{\"date\":\"2025-08-12\",\"grade\":2,\"interval\":1},{\"date\":\"2025-08-15\",\"grade\":2,\"interval\":1},{\"date\":\"2025-08-18\",\"grade\":3,\"interval\":3},{\"date\":\"2025-08-21\",\"grade\":4,\"interval\":15}]"
    },
    {
      "userEmail": "user2@example.com",
      "frontContent": "How does 'this' work in JavaScript?",
      "backContent": "Context of 'this' depends on how function is called:\\n\\n- **Arrow functions**: Inherit 'this' from enclosing scope\\n- **Regular functions**: 'this' determined by call site\\n- **Methods**: 'this' refers to the object\\n- **Constructors**: 'this' refers to new instance\\n\\nUse bind/call/apply to set explicitly",
      "deckId": 4,
      "aFactor": 2.1,
      "repetitionCount": 2,
      "intervalDays": 3,
      "lapsesCount": 0,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-09-04\",\"grade\":3,\"interval\":1},{\"date\":\"2025-09-05\",\"grade\":4,\"interval\":3}]"
    },
    {
      "userEmail": "user1@example.com",
      "frontContent": "What is destructuring in JavaScript?",
      "backContent": "Syntax to extract values from objects and arrays:\\n\\n**Object**: `const {name, age} = person`\\n**Array**: `const [first, second] = array`\\n**With defaults**: `const {name = 'Unknown'} = person`\\n**Renaming**: `const {name: fullName} = person`",
      "deckId": 4,
      "aFactor": 2.6,
      "repetitionCount": 1,
      "intervalDays": 3,
      "lapsesCount": 0,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-09-05\",\"grade\":4,\"interval\":3}]"
    },
    {
      "userEmail": "user2@example.com",
      "frontContent": "Explain Promise.all() vs Promise.race()",
      "backContent": "Two different ways to handle multiple promises:\\n\\n**Promise.all()**: Waits for ALL promises to resolve, fails if ANY reject. Returns array of results.\\n\\n**Promise.race()**: Resolves/rejects as soon as the FIRST promise settles. Returns single result from winner.",
      "deckId": 4,
      "aFactor": 2.3,
      "repetitionCount": 1,
      "intervalDays": 2,
      "lapsesCount": 0,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-09-06\",\"grade\":3,\"interval\":2}]"
    },
    {
      "userEmail": "user2@example.com",
      "frontContent": "What is JSX in React?",
      "backContent": "JavaScript XML - syntax extension that allows writing HTML-like syntax in JavaScript. Transpiled to React.createElement() calls by Babel:\\n\\n`const element = <h1>Hello World</h1>`\\nbecomes\\n`React.createElement('h1', null, 'Hello World')`",
      "deckId": 3,
      "aFactor": 2.5,
      "repetitionCount": 1,
      "intervalDays": 3,
      "lapsesCount": 0,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-09-05\",\"grade\":4,\"interval\":3}]"
    },
    {
      "userEmail": "demo@example.com",
      "frontContent": "Explain the useState hook in React",
      "backContent": "Hook for adding state to functional components. Returns array with current state and setter function:\\n\\n`const [count, setCount] = useState(0)`\\n\\nCalling setCount triggers component re-render. Can pass function to setter for state based on previous value.",
      "deckId": 3,
      "aFactor": 2.4,
      "repetitionCount": 2,
      "intervalDays": 4,
      "lapsesCount": 0,
      "sourceType": "ai_generated",
      "reviewHistory": "[{\"date\":\"2025-09-04\",\"grade\":3,\"interval\":2},{\"date\":\"2025-09-06\",\"grade\":4,\"interval\":4}]"
    },
    {
      "userEmail": "user2@example.com",
      "frontContent": "What is useEffect used for in React?",
      "backContent": "Hook for handling side effects in functional components. Replaces componentDidMount, componentDidUpdate, and componentWillUnmount:\\n\\n`useEffect(() => { /* effect */ }, [dependencies])`\\n\\nEmpty array [] runs once, no array runs every render, dependencies control when it runs.",
      "deckId": 3,
      "aFactor": 2.2,
      "repetitionCount": 2,
      "intervalDays": 5,
      "lapsesCount": 0,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-09-01\",\"grade\":3,\"interval\":2},{\"date\":\"2025-09-03\",\"grade\":4,\"interval\":5}]"
    },
    {
      "userEmail": "demo@example.com",
      "frontContent": "How do you pass data between React components?",
      "backContent": "Multiple patterns for component communication:\\n\\n1. **Props**: Parent to child data flow\\n2. **Callbacks**: Child to parent communication\\n3. **Context API**: Avoid prop drilling for global state\\n4. **State Libraries**: Redux, Zustand for complex state management",
      "deckId": 3,
      "aFactor": 2.3,
      "repetitionCount": 1,
      "intervalDays": 2,
      "lapsesCount": 0,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-09-06\",\"grade\":3,\"interval\":2}]"
    },
    {
      "userEmail": "user2@example.com",
      "frontContent": "What is the Virtual DOM in React?",
      "backContent": "JavaScript representation of the real DOM kept in memory. React compares (diffs) current and previous virtual DOM trees, then updates only the changed elements in the real DOM for better performance. This process is called reconciliation.",
      "deckId": 3,
      "aFactor": 2.0,
      "repetitionCount": 3,
      "intervalDays": 6,
      "lapsesCount": 1,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-08-25\",\"grade\":2,\"interval\":1},{\"date\":\"2025-08-27\",\"grade\":3,\"interval\":3},{\"date\":\"2025-08-30\",\"grade\":4,\"interval\":6}]"
    },
    {
      "userEmail": "demo@example.com",
      "frontContent": "Controlled vs uncontrolled components in React?",
      "backContent": "Two patterns for handling form inputs:\\n\\n**Controlled**: React state controls input value via value prop and onChange handler. Preferred for validation and form handling.\\n\\n**Uncontrolled**: DOM handles input state, use refs to access values. Simpler but less React-like.",
      "deckId": 3,
      "aFactor": 2.1,
      "repetitionCount": 1,
      "intervalDays": 1,
      "lapsesCount": 0,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-09-07\",\"grade\":3,\"interval\":1}]"
    }
  ],
  "test": [
    {
      "userEmail": "test@example.com",
      "frontContent": "What does npm stand for?",
      "backContent": "Node Package Manager - package manager for JavaScript and Node.js",
      "deckId": 2,
      "aFactor": 2.5,
      "repetitionCount": 0,
      "intervalDays": 1,
      "lapsesCount": 0,
      "sourceType": "manual",
      "reviewHistory": "[]"
    },
    {
      "userEmail": "test@example.com",
      "frontContent": "What is a React component?",
      "backContent": "A reusable piece of UI that can be either a function or class that returns JSX",
      "deckId": 3,
      "aFactor": 2.5,
      "repetitionCount": 1,
      "intervalDays": 2,
      "lapsesCount": 0,
      "sourceType": "manual",
      "reviewHistory": "[{\"date\":\"2025-09-06\",\"grade\":3,\"interval\":2}]"
    }
  ],
  "production": [
    {
      "userEmail": "system@company.com",
      "frontContent": "Welcome! What is spaced repetition for programming?",
      "backContent": "A learning technique that helps developers retain programming concepts, syntax, and patterns by reviewing them at increasing intervals based on how well you remember them. Perfect for mastering new frameworks, languages, and best practices.",
      "deckId": "Welcome",
      "aFactor": 2.5,
      "repetitionCount": 0,
      "intervalDays": 1,
      "lapsesCount": 0,
      "sourceType": "manual",
      "reviewHistory": "[]"
    }
  ]
}